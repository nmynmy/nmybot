#–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –æ—Ç –ì—Ä–∏–≥–æ—Ä–∏—è –ß–∞—Ö–æ–≤–∞(1-–ú–î-15) :)

import telebot
from game_XO import *
from FUN import *
from SECRET import *
import DZ

import telebot
from telebot import types

from time import sleep

import BotGames
from menuBot import Menu, Users


bot = telebot.TeleBot(TOKEN)
game21 = None

@bot.message_handler(commands="start")
def command(message):
    chat_id = message.chat.id
    txt_message = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –ì—Ä–∏–≥–æ—Ä–∏—è –Ω–∞ —è–∑—ã–∫–µ Python"
    bot.send_sticker(chat_id, 'CAACAgIAAxkBAAITEWKZQX8UnFswPq4g8s4IfHuTTsGhAALXGAACbibhSwVjLcKY6_yrJAQ')
    bot.send_message(chat_id, text=txt_message, reply_markup=Menu.getMenu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é").markup)

@bot.message_handler(content_types=['sticker'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    sticker = message.sticker
    bot.send_message(message.chat.id, sticker)

@bot.message_handler(content_types=['audio'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    audio = message.audio
    bot.send_message(chat_id, audio)

@bot.message_handler(content_types=['voice'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    voice = message.voice
    bot.send_message(message.chat.id, voice)

@bot.message_handler(content_types=['photo'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    photo = message.photo
    bot.send_message(message.chat.id, photo)

@bot.message_handler(content_types=['video'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    video = message.video
    bot.send_message(message.chat.id, video)

@bot.message_handler(content_types=['document'])
def get_messages(message):
    chat_id = message.chat.id
    mime_type = message.document.mime_type
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type + " (" + mime_type + ")")

    document = message.document
    bot.send_message(message.chat.id, document)
    if message.document.mime_type == "video/mp4":
        bot.send_message(message.chat.id, "This is a GIF!")

@bot.message_handler(content_types=['location'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    location = message.location
    bot.send_message(message.chat.id, location)

@bot.message_handler(content_types=['contact'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    contact = message.contact
    bot.send_message(message.chat.id, contact)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global game21

    chat_id = message.chat.id
    ms_text = message.text

    cur_user = Users.getUser(chat_id)
    if message.text == "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏":
        id = message.from_user.id
        side = "1" #–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω—è—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
        locals()[id] = Game(str(message.from_user.username), side, message.from_user.username) #—Å–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å —Å –∏–≥—Ä–æ–π
        bot.send_message(message.from_user.id, "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–∏–≥—Ä–∞—Ç—å —ç—Ç–æ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",reply_markup=generate_menu(
            users[str(message.from_user.username)].generate_board_bot('10'))) #"10" - –∫–æ—Å—Ç—ã–ª—å
        users[message.from_user.username].bot_recursiv()

    if cur_user == None :
        cur_user = Users(chat_id, message.json["from"])

    result = goto_menu(chat_id, ms_text)
    if result :
        return

    cur_menu = Menu.getCurMenu(chat_id)
    if cur_menu != None and ms_text in cur_menu.buttons:
        cur_user.set_cur_menu(ms_text)

        if ms_text == "üìö –ü–æ–º–æ—â—å":
            send_help(chat_id)

        elif ms_text == 'üéÆ –ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–∏–∫':
            bot.send_message(chat_id, text=get_nickname())

        elif ms_text == 'üê∂ –ü—Ä–∏—Å–ª–∞—Ç—å —Å–æ–±–∞–∫—É':
            bot.send_photo(chat_id, photo=get_dogURL(), caption="–í–æ—Ç —Ç–µ–±–µ —Å–æ–±–∞—á–∫–∞")

        elif ms_text == 'üòÖ –ü—Ä–∏—Å–ª–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç':
            bot.send_message(chat_id, text=get_anekdot())

        elif ms_text == 'üé¨ –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–∏–ª—å–º':
            send_film(chat_id)

        elif ms_text == 'üéÆ –°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞':
            bot.send_message(chat_id, text=get_game())

        elif ms_text == "–£–≥–∞–¥–∞–π –∫—Ç–æ?":
            get_ManOrNot(chat_id)

        elif ms_text == "‚ùå‚≠ï –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä":
            bot.send_message(chat_id, text="–í –¥–∏–∞–ª–æ–≥–µ —Å –¥—Ä—É–≥–æ–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ - '@testnmy_bot'")
            img = open('xo.jpg', 'rb')
            bot.send_photo(chat_id, img)



        elif ms_text == "–ö–∞—Ä—Ç—É!" :
            if game21 == None :
                goto_menu(chat_id, "‚¨Ö –í—ã—Ö–æ–¥")
                return
            text_game = game21.get_cards(1)
            bot.send_media_group(chat_id, media=getMediaCards(game21))
            bot.send_message(chat_id, text=text_game)

        elif ms_text == "–°—Ç–æ–ø!":
            game21 = None
            goto_menu(chat_id, "‚¨Ö –í—ã—Ö–æ–¥")
            return


        elif ms_text in BotGames.GameRPS.values :  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
            bot.send_message(chat_id, text="–ñ–¥–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
            for _ in range(5) :
                text_game = ""
                for user in Users.activeUsers.values() :
                    if cur_user.get_cur_enemy() :
                        user = cur_user.get_cur_enemy()
                    if user.id != cur_user.id and user.get_cur_menu() in BotGames.GameRPS.values :
                        user.set_cur_enemy(cur_user)
                        enemy_value = user.get_cur_menu()
                        bot.send_message(chat_id, text="–¢–≤–æ–π –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ - @{enemy}".format(enemy=user.userName))
                        gameRSP = BotGames.getGame(chat_id)
                        if gameRSP == None :  # –µ—Å–ª–∏ –º—ã —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø–∞–ª–∏ –≤ —ç—Ç–æ –º–µ–Ω—é, –∞ –æ–±—ä–µ–∫—Ç–∞ —Å –∏–≥—Ä–æ–π –Ω–µ—Ç
                            goto_menu(chat_id, "–í—ã—Ö–æ–¥")
                            return
                        text_game = gameRSP.onlineRPS(ms_text, enemy_value)
                        bot.send_message(chat_id, text=text_game)
                        gameRSP.newGame()
                        break
                if text_game :
                    break
                sleep(1)
            if not text_game :
                bot.send_message(chat_id, text="–î—Ä—É–≥–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω :–°")
            sleep(1)
            cur_user.set_cur_menu("")
            cur_user.set_cur_enemy("")


        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 1" :
            DZ.dz1(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 2" :
            DZ.dz2(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 3" :
            DZ.dz3(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 4,5" :
            DZ.dz45(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 6" :
            DZ.dz6(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 7.1" :
            DZ.dz7n(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 7.2":
            DZ.dz7a(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 8" :
            DZ.dz8(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 9.1" :
            DZ.dz91(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 9.2" :
            DZ.dz92(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 10" :
            DZ.dz10(bot, chat_id)

    else:
        bot.send_message(chat_id, text="–ú–Ω–µ –∂–∞–ª—å, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É:" + ms_text)
        goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@bot.callback_query_handler(func=lambda call: True)
def call_back(call):
    print(call)
    if call.data in [str(i) for i in range(9)]:
        try: #–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Å—Ç–∏ –æ–Ω–ª–∞–π–Ω
            if not getattr(users[call.inline_message_id],str(call.from_user.id)[::-1]):
                bot.answer_callback_query(call.id, "–ñ–î–ò –°–í–û–ï–ô –û–ß–ï–†–ï–î–ò!!!ü§¨üò°ü§¨üò°") #–≤—Å–ø—ã–ª–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
            else:
                if not users[call.inline_message_id].check_win():
                    bot.edit_message_reply_markup(inline_message_id=call.inline_message_id, reply_markup=generate_menu(users[call.inline_message_id].generate_board(str(call.from_user.id),str(call.data))))
                    if users[call.inline_message_id].check_win():
                        bot.edit_message_text(
                            text=users[call.inline_message_id].check_win() + " " + call.from_user.username + " ü•≥",
                            inline_message_id=call.inline_message_id)
                else:
                    bot.edit_message_text(text=users[call.inline_message_id].check_win() + " " + call.from_user.username+" ü•≥", inline_message_id=call.inline_message_id)
        except: #–∏–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º

            if not users[call.from_user.username].check_win(): #–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å–∫—É
                bot.edit_message_reply_markup(call.from_user.id, call.message.id, reply_markup=generate_menu( #–∏–∑–º–µ–Ω—è–µ–º –ø–æ–¥ –Ω–æ–≤—ã–π —Ö–æ–¥
                    users[str(call.from_user.username)].generate_board_bot(call.data)))
                users[call.from_user.username].bot_recursiv()

                if users[call.from_user.username].check_win():
                    bot.edit_message_text(
                        users[call.from_user.username].check_win() + " " + call.from_user.username + " ü•≥",
                        call.from_user.id, call.message.id)
            else:
                bot.edit_message_text(users[call.from_user.username].check_win() + " " + call.from_user.username + " ü•≥", call.from_user.id, call.message.id)

    elif call.inline_message_id: #–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        side = call.data.replace("‚ùå", "0").replace("‚≠ï", "1") #x,o -> 0,1
        try:
            try:
                if getattr(users[call.inline_message_id],str(call.from_user.id)) != side: #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –µ–≥–æ –∞—Ç—Ä–∏–º—É—Ç
                    bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É") #–≤—Å–ø—ã–ª–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
            except:

                users[call.inline_message_id].add_user(str(call.from_user.id), side)
                bot.edit_message_reply_markup(inline_message_id=call.inline_message_id, reply_markup=generate_menu(
                    users[str(call.inline_message_id)].generate_board(str(call.from_user.id), '10')))
        except:
            bot.edit_message_reply_markup(inline_message_id=call.inline_message_id, reply_markup=generate_menu(["‚≠ï","‚ùå"].pop(int(side))))
            create_class(call.inline_message_id,call,side)

def create_class(id,call,side): #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å(–≤ —Å–ª—É—á–∞–µ –æ–Ω–ª–∞–π–Ω–∞)
    locals()[id] = Game(str(call.from_user.id), side, call.inline_message_id)



def goto_menu(chat_id, name_menu):
    cur_menu = Menu.getCurMenu(chat_id)
    if name_menu == "‚¨Ö –í—ã—Ö–æ–¥" and cur_menu != None and cur_menu.parent != None:
        target_menu = Menu.getMenu(chat_id, cur_menu.parent.name)
    else:
        target_menu = Menu.getMenu(chat_id, name_menu)

    if target_menu != None :
        bot.send_message(chat_id, text=target_menu.name, reply_markup=target_menu.markup)

        if target_menu.name == "–ò–≥—Ä–∞ –≤ 21":
            global game21
            game21 = BotGames.newGame(chat_id, BotGames.Game21())
            text_game = game21.get_cards(2)
            bot.send_media_group(chat_id, media=getMediaCards(game21))
            bot.send_message(chat_id, text=text_game)

        elif target_menu.name == "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞":
            gameRPS = BotGames.newGame(chat_id, BotGames.GameRPS())
            text_game = "<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º: </b>\n" \
                        "1. –ö–∞–º–µ–Ω—å > –ù–æ–∂–Ω–∏—Ü—ã\n" \
                        "2. –ë—É–º–∞–≥–∞ > –ö–∞–º–µ–Ω—å\n" \
                        "3. –ù–æ–∂–Ω–∏—Ü—ã > –ë—É–º–∞–≥–∞"
            bot.send_photo(chat_id, photo="https://media.istockphoto.com/photos/rock-paper-scissors-game-set-picture-id162675736", caption=text_game,
                           parse_mode='HTML')
        return True
    else:
        return False


def getMediaCards(game21):
    medias = []
    for url in game21.arr_cards_URL :
        medias.append(types.InputMediaPhoto(url))
    return medias


def send_film(chat_id):
    film = get_randomFilm()
    info_str = f"<b>{film['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</b>\n" \
               f"–ì–æ–¥: {film['–ì–æ–¥']}\n" \
               f"–°—Ç—Ä–∞–Ω–∞: {film['–°—Ç—Ä–∞–Ω–∞']}\n" \
               f"–ñ–∞–Ω—Ä: {film['–ñ–∞–Ω—Ä']}\n" \
               f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']}"
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–¢—Ä–µ–π–ª–µ—Ä", url=film["–¢—Ä–µ–π–ª–µ—Ä_url"])
    btn2 = types.InlineKeyboardButton(text="–°–ú–û–¢–†–ï–¢–¨ –æ–Ω–ª–∞–π–Ω", url=film["–§–∏–ª—å–º_url"])
    markup.add(btn1, btn2)
    bot.send_photo(chat_id, photo=film['–û–±–ª–æ–∂–∫–∞_url'], caption=info_str, parse_mode='HTML', reply_markup=markup)


@bot.inline_handler(func=lambda query: True)
def empty_query(query):
    hint = "–ü–æ–∏–≥—Ä–∞–π –≤ –º–µ–Ω—è"
    try:
        r = types.InlineQueryResultArticle(
                id='1',
                title='–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ –æ–Ω–ª–∞–π–Ω',
                description=hint,
                input_message_content=types.InputTextMessageContent(
                message_text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —à–∏–∑–æ—Ñ—Ä–µ–Ω–∏—è",
                ),reply_markup=generate_menu(["‚ùå","‚≠ï"])) #–≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã

        bot.answer_inline_query(query.id, [r], cache_time=1)
    except Exception as e:
        print(e)


bot.polling(none_stop=True, interval=0)

print()
